from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile, CallbackQuery
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callback_classes import *
from params_dict import *


OK = '‚úÖ '
NOK = '‚ùå '


def make_row_keyboard(items: list[str]) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    :param items: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    :return: –æ–±—ä–µ–∫—Ç —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    row = [KeyboardButton(text=item) for item in items]
    return ReplyKeyboardMarkup(keyboard=[row], resize_keyboard=True)


def get_gender_selection_kb():
    kb = [
            [types.KeyboardButton(text='‚ôÇ –ú—É–∂—Å–∫–æ–π')],
            [types.KeyboardButton(text='‚ôÄ –ñ–µ–Ω—Å–∫–∏–π')]
        ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_go_to_menu():
    kb = [[types.KeyboardButton(text='üè† –í –º–µ–Ω—é')]]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_back_uploading_photo():
    kb = [[types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def next():
    kb = [
        [types.KeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å üéâ')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_gender_selection():
    kb = [
        [types.KeyboardButton(text='‚ôÇ –ú—É–∂—Å–∫–æ–π')],
        [types.KeyboardButton(text='‚ôÄ –ñ–µ–Ω—Å–∫–∏–π')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def confirm_photo():
    kb = [
        [types.KeyboardButton(text='‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å')],
        [types.KeyboardButton(text='üîÑ –ò–∑–º–µ–Ω–∏—Ç—å')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def accept_photo():
    kb = [
        [types.KeyboardButton(text='‚úÖ –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')],
        [types.KeyboardButton(text='‚ú® –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def parameters():
    kb = [[
        types.InlineKeyboardButton(text="–§—É—Ç–±–æ–ª–∫–∞", callback_data="t-shirt"),
        types.InlineKeyboardButton(text="–ë–ª—É–∑–∫–∞", callback_data="blouse")],
        [types.InlineKeyboardButton(text="–†—É–±–∞—à–∫–∞", callback_data="shirt"),
        types.InlineKeyboardButton(text="–ö—É—Ä—Ç–∫–∞", callback_data="jacket")],
        [types.InlineKeyboardButton(text="–î–∂–µ–º–ø–µ—Ä", callback_data="jumper"),
        types.InlineKeyboardButton(text="–ö–æ—Ñ—Ç–∞", callback_data="sweater")
    ]]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)


def get_button(data, user_data={'sex': 'woman'}, callback_data=''):
    woman_param = ['–ë–ª—É–∑–∫–∞']
    sex = user_data['sex']

    d = params_dict[data]

    adjust_list = []
    adjust_flag = 0
    builder = InlineKeyboardBuilder()
    i = 0
    for key, val in d.items():
        if sex == 'man' and key in woman_param:
            continue

        text = key
        state = NOK
        if val == callback_data:
            text = OK + key
            state = OK
        if len(text) < 12:
            if adjust_flag == 1:
                adjust_list.append(2)
                adjust_flag = 0
            else:
                adjust_flag += 1
        else:
            if adjust_flag == 1:
                adjust_list.extend([1, 1])
            else:
                adjust_list.append(1)
            adjust_flag = 0

        builder.button(
            text=text,
            callback_data=ParamsCallbackFactory(index=i,
                                                data=val,
                                                state=state)
        )
        i += 1

    if adjust_flag == 1:
        adjust_list.append(1)

    back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
    next_button = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data='next')
    apply_button = types.InlineKeyboardButton(text='‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å', callback_data='next')

    # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    # builder.adjust(1)
    if data == 'base_clothes':
        menu = 1
    elif data == 'style':
        menu = 3
    else:
        menu = 2

    if menu == 1:
        builder.add(next_button)
        adjust_list.append(1)
    elif menu == 2:
        builder.add(back_button).add(next_button)
        adjust_list.append(2)
    elif menu == 3:
        builder.add(back_button).add(apply_button)
        adjust_list.append(2)
    
    # print(adjust_list)
    builder.adjust(*adjust_list)

    return builder.as_markup()

def apply():
    kb = [
        [types.KeyboardButton(text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å')],
        [types.KeyboardButton(text='–ù–∞–∑–∞–¥')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def params_kb():
    kb = [
        [types.KeyboardButton(text='–î–∞–ª–µ–µ ‚û°Ô∏è')], 
        [types.KeyboardButton(text='–ù–∞–∑–∞–¥')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    

def styles():
    kb = [
        [types.KeyboardButton(text='–°—Ç–∏–ª—å -'), types.KeyboardButton(text='–°—Ç–∏–ª—å -')],
        [types.KeyboardButton(text='–°—Ç–∏–ª—å -'), types.KeyboardButton(text='–°—Ç–∏–ª—å -')],
        [types.KeyboardButton(text='‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å')],
        [types.KeyboardButton(text='–ù–∞–∑–∞–¥')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_welcome_screen(pro):
    print('rr')
    kb = []
    if pro == 'false':
        kb = [
            [types.KeyboardButton(text='‚ú® –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑'), types.KeyboardButton(text='üíØ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–∫–∏')],
            [types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª'), types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ')]
        ]
    else:
        kb = [
            [types.KeyboardButton(text='‚ú® –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑')],
            [types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª'), types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ')]
        ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        

def choose_look(index):
# def choose_look(builder):
    kb = [
        [
            types.InlineKeyboardButton(text="‚ùå –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"nok_{index}"),
            types.InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"ok_{index}")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)

    # builder.add(types.InlineKeyboardButton(
    #     text="‚úÖ –í—ã–±—Ä–∞—Ç—å –∏ –¥–∞–ª–µ–µ",
    #     callback_data="ok")
    # )
    # builder.add(types.InlineKeyboardButton(
    #     text="‚ùå –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è",
    #     callback_data="nok")
    # )
    # return builder.as_markup()


def save_look(url):
    kb = [
        [types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ", url=url)],
        # [types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)


def finish():
    print('e')
    kb = [
        # [types.KeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è')],
        [types.KeyboardButton(text='üîÑ –ï—â–µ –æ–±—Ä–∞–∑'), types.KeyboardButton(text='üè† –í –º–µ–Ω—é')]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def go_to_pro():
    kb = [
        [types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', url="https://forms.gle/sE1bNyEEopwDxkvn6")],
        [types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', url="https://forms.gle/CS8g4QrTQXuYgKCJ6")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)
